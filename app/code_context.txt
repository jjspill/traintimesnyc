// File: about/page.tsx
// components/TrainsAboutPage.tsx
'use client';

import React from 'react';
import {
  TrainCarousel,
  TrainSymbolsDisplay,
} from '../trainHelpers/TrainComponents';

const TrainsAboutPage: React.FC = () => {
  return (
    <div className="flex justify-center items-start md:p-4">
      <div className="min-h-[100vh] bg-white shadow-xl md:rounded-3xl overflow-hidden w-full max-w-4xl">
        <div className="relative flex flex-col justify-center items-center w-full min-h-20 h-fit bg-black text-center font-semibold text-white py-2 font-sans">
          <div className="min-h-[2px] w-[90%] md:w-[80%] bg-white"></div>
          <div className="flex">
            <div className="text-pretty text-4xl px-4">Train Times NYC</div>
          </div>
          <div className="block md:hidden">
            <TrainCarousel />
          </div>
          <div className="hidden md:block">
            <TrainSymbolsDisplay />
          </div>
        </div>
        <div className="max-w-4xl mx-auto px-4 py-8 text-gray-700">
          <section aria-labelledby="mission-title">
            <h2 id="mission-title" className="text-2xl font-bold text-gray-900">
              Our Mission
            </h2>
            <p className="mt-2 pl-0.5">
              Train Times NYC is dedicated to revolutionizing how New Yorkers
              access real-time subway information. Our platform ensures that
              millions of daily commuters and visitors can navigate the
              extensive subway network efficiently and with ease, providing live
              updates on schedules, delays, and service changes.
            </p>
          </section>

          <section aria-labelledby="privacy-title" className="mt-6">
            <h2 id="privacy-title" className="text-2xl font-bold text-gray-900">
              Privacy Commitment
            </h2>
            <p className="mt-2 pl-0.5">
              At Train Times NYC, your privacy is paramount. We do not track any
              personal information, including your location. Our platform
              operates solely to provide real-time updates and transit
              information without any data tracking or personal profiling.
            </p>
          </section>

          <section aria-labelledby="how-it-works-title" className="mt-6">
            <h2
              id="how-it-works-title"
              className="text-2xl font-bold text-gray-900"
            >
              How It Works
            </h2>
            <ul className="list-disc pl-5 mt-2">
              <li>
                <strong>GTFS Realtime:</strong> Leveraging real-time data feeds
                from the MTA, we provide updates on subway locations, trip
                delays, and service alerts directly to your device.
              </li>
              <li>
                <strong>GTFS Schedule:</strong> We integrate static MTA schedule
                data to offer detailed insights into station stops, route
                timetables, and service frequencies.
              </li>
              <li>
                <strong>Custom Software Integration:</strong> Our
                custom-developed backend system ensures efficient processing and
                integration of diverse data sources for optimal performance.
              </li>
              <li>
                <strong>User-Friendly Interface:</strong> Our application is
                designed to be intuitive and responsive, providing a seamless
                user experience across various devices.
              </li>
            </ul>
          </section>

          <section aria-labelledby="why-gtfs-title" className="mt-6">
            <h2
              id="why-gtfs-title"
              className="text-2xl font-bold text-gray-900"
            >
              Why We Use GTFS
            </h2>
            <p className="mt-2 pl-0.5">
              The General Transit Feed Specification (GTFS) is a critical
              framework that allows for the uniform representation of public
              transit data. Adopted globally, GTFS enables our service to
              maintain high standards of accuracy and reliability.
              <strong> History of GTFS:</strong> Originally developed by Google
              and Portland&apos;s TriMet in 2005, GTFS has evolved to become the
              worldwide standard used by transit agencies to provide the public
              with accessible transit information.
            </p>
          </section>

          <section aria-labelledby="commitment-title" className="mt-6">
            <h2
              id="commitment-title"
              className="text-2xl font-bold text-gray-900"
            >
              Our Commitment to Quality
            </h2>
            <p className="mt-2 pl-0.5">
              At Train Times NYC, we are committed to the highest standards of
              data integrity. Our team works tirelessly to ensure our data is
              up-to-date and reflective of real-time MTA conditions, empowering
              you with the information needed to make informed travel decisions.
            </p>
          </section>

          <section aria-labelledby="future-title" className="mt-6">
            <h2 id="future-title" className="text-2xl font-bold text-gray-900">
              Looking Ahead
            </h2>
            <p className="mt-2 pl-0.5">
              We are continuously working to enhance our services, with plans to
              incorporate personalized trip planning tools and improved
              accessibility features to cater to all New Yorkers and visitors
              alike.
            </p>
          </section>

          <section aria-labelledby="testimonials-title" className="mt-6">
            <h2
              id="testimonials-title"
              className="text-2xl font-bold text-gray-900"
            >
              What Our Users Say
            </h2>
            <ul className="list-disc pl-5 mt-2">
              <li>
                &quot;Train Times NYC has transformed how I plan my daily
                commute. The real-time updates have saved me countless
                hours.&quot; –<em> Jack Ferber, Regular Commuter</em>
              </li>
              <li>
                &quot;Thanks to Train Times NYC, I avoided a major delay during
                a city-wide event and made it to my meeting on time.&quot; –
                <em> Zad Khan, Business Professional</em>
              </li>
            </ul>
          </section>

          <section aria-labelledby="contact-title" className="mt-6">
            <h2 id="contact-title" className="text-2xl font-bold text-gray-900">
              Get in Touch
            </h2>
            <p className="mt-2 pl-0.5">
              Interested in how Train Times NYC can improve your commute or
              looking to collaborate? Reach out to us at{' '}
              <a
                href="mailto:traintimesnyc@gmail.com"
                className="text-blue-600 hover:text-blue-800"
              >
                traintimesnyc@gmail.com
              </a>
              , or follow us on social media to stay updated with the latest
              developments.
            </p>
          </section>
        </div>
      </div>
    </div>
  );
};

export default TrainsAboutPage;

// File: api/route.ts
// pages/api/subway.ts
import { Train } from '../trainHelpers/TrainComponents';
import { buildTrainData } from '../trainHelpers/trainHelper';
import { neon } from '@neondatabase/serverless';

const sql = neon(process.env.DATABASE_URL!);

// Utility to perform retries
async function retry<T>(
  operation: () => Promise<T>,
  retries: number,
  delay: number,
): Promise<T> {
  try {
    return await operation();
  } catch (error) {
    if (retries > 1) {
      await new Promise((resolve) => setTimeout(resolve, delay));
      return retry(operation, retries - 1, delay);
    } else {
      throw error;
    }
  }
}

export async function POST(request: Request) {
  const body = await request.json();
  const { stops } = body;
  const stopIds = stops?.map((station: any) => station.stopId);

  const TIMEOUT_MS = 500; // Maximum delay for primary before checking secondary
  const RETRY_TIMES = 3;
  const RETRY_DELAY = 200;

  const fetchPrimary = () =>
    sql('SELECT * FROM arrivals WHERE stop_id = ANY($1)', [stopIds]).then(
      (data) => ({ source: 'primary', data }),
    );

  const fetchSecondary = () =>
    sql('SELECT * FROM arrivals_secondary WHERE stop_id = ANY($1)', [
      stopIds,
    ]).then((data) => ({ source: 'secondary', data }));

  let primaryResolved = false;
  let fallbackTimer: NodeJS.Timeout;

  const primaryPromise = retry(
    () =>
      new Promise(async (resolve, reject) => {
        try {
          const data = await fetchPrimary();
          primaryResolved = true;
          clearTimeout(fallbackTimer);
          resolve(data);
        } catch (error) {
          reject(error);
        }
      }),
    RETRY_TIMES,
    RETRY_DELAY,
  );

  const fallbackPromise = new Promise((resolve) => {
    fallbackTimer = setTimeout(() => {
      if (!primaryResolved) {
        retry(fetchSecondary, RETRY_TIMES, RETRY_DELAY).then(resolve);
      }
    }, TIMEOUT_MS);
  });

  try {
    const result = (await Promise.race([primaryPromise, fallbackPromise])) as {
      source: string;
      data: Train[];
    };
    const newTrainData = buildTrainData(result.data, stops);
    const stringify = JSON.stringify(newTrainData[0], null, 2);
    return new Response(stringify, {
      status: 200,
      headers: {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
      },
    });
  } catch (error) {
    console.error('Error fetching data from database sources:', error);
    return new Response(
      JSON.stringify({
        error: 'Failed to fetch train data',
        details: error,
      }),
      {
        status: 500,
        headers: {
          'Access-Control-Allow-Origin': '*',
          'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
        },
      },
    );
  }
}

// File: layout.tsx
import type { Metadata } from 'next';
import { Inter } from 'next/font/google';
import './globals.css';
import { Analytics } from '@vercel/analytics/react';
import { link } from 'fs';

const inter = Inter({ subsets: ['latin'] });

export const metadata: Metadata = {
  title: 'Train Times NYC - Live Subway Updates',
  description:
    'Discover real-time MTA train arrival times for subway stations nearest to you.',
  keywords:
    'train times, MTA, nyc trains, subway, subway near me, NYC MTA train times, live subway times NYC, real-time train schedule NYC, New York subway stations, NYC train routes',
  openGraph: {
    title: 'Train Times NYC - Live Subway Updates',
    type: 'website',
    url: 'https://traintimesnyc.com',
    siteName: 'Train Times NYC',
    description:
      'Discover real-time MTA train arrival times for subway stations nearest to you.',
  },
  metadataBase: new URL('https://traintimesnyc.com'),
  appleWebApp: {
    capable: true,
    title: 'Train Times',
    statusBarStyle: 'black',
    startupImage: [{ url: '/apple-icon.jpg' }],
  },
  icons: [
    {
      rel: 'apple-touch-icon',
      url: '/apple-icon.jpg',
      type: 'image/jpg',
    },
  ],
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <head>
        <link
          rel="apple-touch-startup-image"
          href="apple-splash-2048-2732.jpg"
          media="(device-width: 1024px) and (device-height
: 1366px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
        />
        <link
          rel="apple-touch-startup-image"
          href="apple-splash-2732-2048.jpg"
          media="(device-width: 1024px) and (device-height: 1366px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
        />
        <link
          rel="apple-touch-startup-image"
          href="apple-splash-1668-2388.jpg"
          media="(device-width: 834px) and (device-height: 1194px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
        />
        <link
          rel="apple-touch-startup-image"
          href="apple-splash-2388-1668.jpg"
          media="(device-width: 834px) and (device-height: 1194px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
        />
        <link
          rel="apple-touch-startup-image"
          href="apple-splash-1536-2048.jpg"
          media="(device-width: 768px) and (device-height: 1024px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
        />
        <link
          rel="apple-touch-startup-image"
          href="apple-splash-2048-1536.jpg"
          media="(device-width: 768px) and (device-height: 1024px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
        />
        <link
          rel="apple-touch-startup-image"
          href="apple-splash-1488-2266.jpg"
          media="(device-width: 744px) and (device-height: 1133px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
        />
        <link
          rel="apple-touch-startup-image"
          href="apple-splash-2266-1488.jpg"
          media="(device-width: 744px) and (device-height: 1133px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
        />
        <link
          rel="apple-touch-startup-image"
          href="apple-splash-1640-2360.jpg"
          media="(device-width: 820px) and (device-height: 1180px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
        />
        <link
          rel="apple-touch-startup-image"
          href="apple-splash-2360-1640.jpg"
          media="(device-width: 820px) and (device-height: 1180px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
        />
        <link
          rel="apple-touch-startup-image"
          href="apple-splash-1668-2224.jpg"
          media="(device-width: 834px) and (device-height: 1112px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
        />
        <link
          rel="apple-touch-startup-image"
          href="apple-splash-2224-1668.jpg"
          media="(device-width: 834px) and (device-height: 1112px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
        />
        <link
          rel="apple-touch-startup-image"
          href="apple-splash-1620-2160.jpg"
          media="(device-width: 810px) and (device-height: 1080px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
        />
        <link
          rel="apple-touch-startup-image"
          href="apple-splash-2160-1620.jpg"
          media="(device-width: 810px) and (device-height: 1080px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
        />
        <link
          rel="apple-touch-startup-image"
          href="apple-splash-1290-2796.jpg"
          media="(device-width: 430px) and (device-height: 932px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)"
        />
        <link
          rel="apple-touch-startup-image"
          href="apple-splash-2796-1290.jpg"
          media="(device-width: 430px) and (device-height: 932px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)"
        />
        <link
          rel="apple-touch-startup-image"
          href="apple-splash-1179-2556.jpg"
          media="(device-width: 393px) and (device-height: 852px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)"
        />
        <link
          rel="apple-touch-startup-image"
          href="apple-splash-2556-1179.jpg"
          media="(device-width: 393px) and (device-height: 852px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)"
        />
        <link
          rel="apple-touch-startup-image"
          href="apple-splash-1284-2778.jpg"
          media="(device-width: 428px) and (device-height: 926px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)"
        />
        <link
          rel="apple-touch-startup-image"
          href="apple-splash-2778-1284.jpg"
          media="(device-width: 428px) and (device-height: 926px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)"
        />
        <link
          rel="apple-touch-startup-image"
          href="apple-splash-1170-2532.jpg"
          media="(device-width: 390px) and (device-height: 844px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)"
        />
        <link
          rel="apple-touch-startup-image"
          href="apple-splash-2532-1170.jpg"
          media="(device-width: 390px) and (device-height: 844px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)"
        />
        <link
          rel="apple-touch-startup-image"
          href="apple-splash-1125-2436.jpg"
          media="(device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)"
        />
        <link
          rel="apple-touch-startup-image"
          href="apple-splash-2436-1125.jpg"
          media="(device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)"
        />
        <link
          rel="apple-touch-startup-image"
          href="apple-splash-1242-2688.jpg"
          media="(device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)"
        />
        <link
          rel="apple-touch-startup-image"
          href="apple-splash-2688-1242.jpg"
          media="(device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)"
        />
        <link
          rel="apple-touch-startup-image"
          href="apple-splash-828-1792.jpg"
          media="(device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
        />
        <link
          rel="apple-touch-startup-image"
          href="apple-splash-1792-828.jpg"
          media="(device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
        />
        <link
          rel="apple-touch-startup-image"
          href="apple-splash-1242-2208.jpg"
          media="(device-width: 414px) and (device-height: 736px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)"
        />
        <link
          rel="apple-touch-startup-image"
          href="apple-splash-2208-1242.jpg"
          media="(device-width: 414px) and (device-height: 736px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)"
        />
        <link
          rel="apple-touch-startup-image"
          href="apple-splash-750-1334.jpg"
          media="(device-width: 375px) and (device-height: 667px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
        />
        <link
          rel="apple-touch-startup-image"
          href="apple-splash-1334-750.jpg"
          media="(device-width: 375px) and (device-height: 667px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
        />
        <link
          rel="apple-touch-startup-image"
          href="apple-splash-640-1136.jpg"
          media="(device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
        />
        <link
          rel="apple-touch-startup-image"
          href="apple-splash-1136-640.jpg"
          media="(device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
        />
      </head>
      <Analytics />
      <body className={inter.className}>{children}</body>
    </html>
  );
}

// File: page.tsx
// pages/index.js
import React from 'react';
import TrainsContainer from './trainHelpers/TrainContainer';

const Home = async () => {
  return (
    <div>
      <TrainsContainer />
    </div>
  );
};

export default Home;

// File: robots.txt
User-agent: *
Disallow: /api/
Disallow: /_next/static/
Sitemap: https://traintimesnyc.com/sitemap.xml

// File: sitemap.ts
import { MetadataRoute } from 'next';

async function sitemap(): Promise<MetadataRoute.Sitemap> {
  const baseUrl = 'https://traintimesnyc.com'; // Default to a fixed base URL
  // const domain = `https://${process.env.NEXT_PUBLIC_VERCEL_URL || baseUrl}`;
  const domain = baseUrl;

  const staticPages: MetadataRoute.Sitemap = [
    {
      url: `${domain}`,
      lastModified: new Date(),
      changeFrequency: 'hourly' as const,
      priority: 1,
    },
    {
      url: `${domain}/about`,
      lastModified: new Date(),
      changeFrequency: 'weekly' as const,
      priority: 1,
    },
  ];

  return staticPages;
}

export default sitemap;

// File: trainHelpers/ClientComponents.tsx
'use client';

import { useEffect, useState } from 'react';
import {
  InformationButton,
  RefreshSVG,
  TrainMenuBarProps,
} from './TrainComponents';

export const TrainMenuBarMobile: React.FC<TrainMenuBarProps> = ({
  refreshLocation,
  setSelectedFamily,
}) => {
  const [showBar, setShowBar] = useState(true);
  const [lastScrollY, setLastScrollY] = useState(0);
  const [isStandalone, setIsStandalone] = useState(false);
  const [isClient, setIsClient] = useState(false);

  useEffect(() => {
    if (typeof window !== 'undefined') {
      setIsClient(true);
      setIsStandalone(
        'standalone' in window.navigator &&
          window.navigator.standalone === true,
      );
    }
  }, []);

  const controlNavbar = () => {
    const scrollY = window.scrollY;
    const innerHeight = window.innerHeight;
    const scrollHeight = document.documentElement.scrollHeight;

    if (
      (scrollY > lastScrollY && scrollY > 100) ||
      scrollY + innerHeight >= scrollHeight - 40
    ) {
      setShowBar(false);
    } else {
      setShowBar(true);
    }
    setLastScrollY(scrollY);
  };

  useEffect(() => {
    window.addEventListener('scroll', controlNavbar);

    return () => {
      window.removeEventListener('scroll', controlNavbar);
    };
  }, [lastScrollY]);

  if (!isClient) {
    return null;
  }

  return (
    <div
      className={`md:hidden fixed bottom-0 left-0 right-0 w-full transition-transform duration-300 ${
        showBar ? 'translate-y-0' : 'translate-y-full'
      }`}
    >
      <div
        className={`w-full flex justify-center items-center bg-transparent ${
          isStandalone ? 'my-4' : 'my-1'
        } p-2`}
      >
        <button
          className="font-semibold"
          onClick={refreshLocation}
          title="Refresh"
        >
          <RefreshSVG />
        </button>
        {/* <FilterButton onSelectFamily={setSelectedFamily} /> */}
        <InformationButton />
      </div>
    </div>
  );
};

// File: trainHelpers/DirectionComponent.tsx
import Link from 'next/link';
import React from 'react';

export const DirectionsButton = ({
  lat,
  lng,
}: {
  lat: number;
  lng: number;
}) => {
  const destinationEncoded = `${lat},${lng}`;
  const isIOS = () => {
    return /iPhone|iPad|iPod/i.test(navigator.userAgent);
  };

  const directionsUrl = isIOS()
    ? `http://maps.apple.com/?daddr=${destinationEncoded}&dirflg=w`
    : `https://www.google.com/maps/dir/?api=1&destination=${destinationEncoded}&travelmode=walking`;

  return (
    <Link
      href={directionsUrl}
      target="_blank"
      rel="noopener noreferrer"
      className="directions-button"
    >
      <MapIcon />
    </Link>
  );
};

const MapIcon = () => {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="16"
      height="16"
      viewBox="0 0 24 24"
      style={{ fill: 'white' }}
    >
      <path d="M12 2a7.008 7.008 0 0 0-7 7c0 5.353 6.036 11.45 6.293 11.707l.707.707.707-.707C12.964 20.45 19 14.353 19 9a7.008 7.008 0 0 0-7-7zm0 16.533C10.471 16.825 7 12.553 7 9a5 5 0 0 1 10 0c0 3.546-3.473 7.823-5 9.533z" />
      <path d="M12 6a3 3 0 1 0 3 3 3 3 0 0 0-3-3zm0 4a1 1 0 1 1 1-1 1 1 0 0 1-1 1z" />
    </svg>
  );
};

export default MapIcon;

// File: trainHelpers/TrainComponents.tsx
import React, { useEffect, useRef, useState } from 'react';
import Link from 'next/link';
import { useStation } from './TrainHooks';
import { getLineFamily } from './trainHelper';
import { DirectionsButton } from './DirectionComponent';

export interface Location {
  lat: number;
  lng: number;
}

export interface Train {
  arrival_time: string;
  route_id: string;
  trip_id: string;
  stop_id: string;
  destination: string;
}

export interface Station {
  stopName: string;
  n_headsign: string;
  s_headsign: string;
  stopId: string;
  distance: number;
  coordinates: Location;
  n_trains: Train[] | null;
  s_trains: Train[] | null;
}

export interface ApiResponse {
  message: string;
  stops: Station[];
}

// suspense for stations
export const StationLoadingPlaceholder = () => (
  <div className="md:grid grid-cols-2 gap-x-4">
    {Array.from({ length: 2 }, (_, index) => (
      <div
        key={index}
        className="mb-4 p-2 border rounded-md shadow bg-gray-200 animate-pulse"
      >
        <div className="flex flex-col items-center space-y-2">
          <div className="w-full bg-gray-300 rounded h-6"></div>{' '}
          <div className="w-2/3 bg-gray-300 rounded h-4"></div>{' '}
          {Array.from({ length: 5 }, (_, index) => (
            <div
              key={index}
              className="w-full flex justify-between items-center"
            >
              <div className="bg-gray-300 rounded-full h-8 w-8"></div>{' '}
              <div className="bg-gray-300 rounded h-4 w-1/4"></div>{' '}
            </div>
          ))}
        </div>
      </div>
    ))}
  </div>
);

export const TrainsLoadingPlaceholder = () => (
  <div className="mb-4 p-2 border rounded-md shadow bg-gray-200 animate-pulse">
    <div className="flex flex-col items-center space-y-2">
      {Array.from({ length: 4 }, (_, index) => (
        <div
          key={index}
          className={`w-full flex flex-row justify-between items-center ${
            index === 3 ? '' : 'border-b border-gray-300 pb-2'
          }`}
        >
          <div className="bg-gray-300 rounded-full h-8 w-8"></div>
          <div className="bg-gray-300 rounded h-4 w-1/4"></div>
        </div>
      ))}
    </div>
  </div>
);

// conjoined station header, for desktop view when stations are grouped horizontally
export const ConjoinedStationDetails = ({ station }: { station: Station }) => {
  console.log(station);
  return (
    <div className="mb-2 w-full font-sans">
      <div className="flex flex-col text-center text-xl font-semibold bg-black text-white p-2 rounded-md">
        <div className="flex flex-col justify-center items-center space-x-2">
          <div className="h-[2px] w-full bg-white"></div>
          <div className="flex items-center justify-center">
            <span>{station.stopName} Station</span>
            {/* <DirectionsButton
              lat={station.coordinates.lat}
              lng={station.coordinates.lng}
            /> */}
          </div>
          <div className="grid grid-cols-2 gap-x-4 w-full">
            <div className="flex items-center justify-center space-x-2">
              <span>{station.n_headsign}</span>
            </div>
            <div className="flex items-center justify-center space-x-2">
              <span>{station.s_headsign}</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

// station header for mobile, north and southbound stations are isolated
const StationDetailsComponent = ({
  stopName,
  headsign,
  trainLength, // if 0, return nothing
  coordinates,
}: {
  stopName: string;
  headsign: string;
  trainLength: number | undefined;
  coordinates: Location;
}) => {
  if (trainLength === 0) {
    return;
  }

  return (
    <div className="flex flex-col text-center text-xl font-semibold font-sans bg-black text-white p-2 mb-2 rounded-md">
      <div className="h-[2px] w-full bg-white"></div>
      <div className="flex items-center justify-center space-x-1">
        <span>{stopName} Station</span>
        <DirectionsButton lat={coordinates.lat} lng={coordinates.lng} />
      </div>
      <div className="flex items-center justify-center space-x-2">
        <span>{headsign}</span>
      </div>
    </div>
  );
};

interface StationProps {
  stationIn: Station;
  refreshCounter: number;
  selectedFamily: string;
}

// async station component, fetches train data for a single station
export const AsyncStationComponent: React.FC<StationProps> = ({
  stationIn,
  refreshCounter,
  selectedFamily,
}) => {
  const station = useStation(stationIn, refreshCounter);

  if (
    getLineFamily(stationIn.stopId) !== selectedFamily &&
    selectedFamily !== ''
  ) {
    return <></>;
  }
  if (station === undefined) {
    return (
      <div>
        <div className="block md:hidden">
          <StationDetailsComponent
            stopName={stationIn.stopName}
            headsign={stationIn.n_headsign}
            trainLength={undefined}
            coordinates={stationIn.coordinates}
          />
          <TrainsLoadingPlaceholder />
        </div>
        <div className="hidden md:block">
          <ConjoinedStationDetails station={stationIn} />
          <div className="grid grid-cols-2 gap-x-4">
            <TrainsLoadingPlaceholder />
            <TrainsLoadingPlaceholder />
          </div>
        </div>
      </div>
    );
  }

  if (station?.n_trains?.length === 0 && station?.s_trains?.length === 0) {
    return (
      <div className="flex flex-col text-center text-xl font-semibold bg-black text-white p-2 rounded-md mb-2">
        <div className="h-[2px] w-full bg-white"></div>
        <div className="flex items-center justify-center space-x-1">
          <span>{stationIn.stopName} Station</span>
          <DirectionsButton
            lat={station.coordinates.lat}
            lng={station.coordinates.lng}
          />
        </div>
        <div className="flex items-center justify-center space-x-2">
          <span>No trains available</span>
        </div>
      </div>
    );
  }

  return (
    <div>
      <div className="block md:hidden">
        <div>
          <StationDetailsComponent
            stopName={station.stopName}
            headsign={station.n_headsign}
            trainLength={station?.n_trains?.length}
            coordinates={station.coordinates}
          />
          {station.n_trains === null ? (
            <TrainsLoadingPlaceholder />
          ) : (
            <TrainComponent trains={station.n_trains} />
          )}
        </div>
        <div>
          <StationDetailsComponent
            stopName={station.stopName}
            headsign={station.s_headsign}
            trainLength={station?.s_trains?.length}
            coordinates={station.coordinates}
          />
          {station.s_trains === null ? (
            <TrainsLoadingPlaceholder />
          ) : (
            <TrainComponent trains={station.s_trains} />
          )}
        </div>
      </div>
      <div className="hidden md:block">
        <ConjoinedStationDetails station={station} />
        <div className="grid grid-cols-2 gap-x-4">
          <div>
            {station.n_trains === null ? (
              <TrainsLoadingPlaceholder />
            ) : (
              <TrainComponent trains={station.n_trains} />
            )}
          </div>
          <div>
            {station.s_trains === null ? (
              <TrainsLoadingPlaceholder />
            ) : (
              <TrainComponent trains={station.s_trains} />
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

interface TrainComponentProps {
  trains: Train[];
  // trainSymbolMap: { [key: string]: React.FC };
}

// train component, displays train data for a single station
export const TrainComponent: React.FC<TrainComponentProps> = ({ trains }) => {
  return trains.slice(0, 4).map((train, index) => {
    const TrainComponent = trainSymbolMap[train.route_id] || null;

    const isLastTrain = index === trains.length - 1 || index === 3;
    return (
      <div
        key={index}
        className={`flex justify-between items-center ${!isLastTrain && 'border-b border-black'} ${isLastTrain && 'pb-4'} py-2`}
      >
        <div className="flex items-center pl-1">
          {TrainComponent && (
            <div className="font-semibold">
              <TrainComponent />
            </div>
          )}
          {!TrainComponent && (
            <UnknownTrainComponent routeId={train.route_id} />
          )}
          <div className="pl-2 text-sm">{train.destination}</div>
        </div>
        <div className="pr-1">
          <span
            className={`${
              train.arrival_time === 'arriving'
                ? 'text-black' // Deeper red with white text
                : train.arrival_time.includes('minute') &&
                    parseInt(train.arrival_time.split(' ')[0], 10) < 5
                  ? 'text-black' // Changed to a darker orange for visibility
                  : 'text-black' // A dark teal for general cases
            } py-1 px-3 rounded-full text-sm`}
          >
            {train.arrival_time}
          </span>
        </div>
      </div>
    );
  });
};

export interface TrainMenuBarProps {
  refreshLocation: () => void;
  setSelectedFamily: (family: string) => void;
}

export const TrainMenuBarDesktop: React.FC<TrainMenuBarProps> = ({
  refreshLocation,
}) => {
  return (
    <div className="hidden md:flex flex-col items-center w-full my-2">
      <div className="w-fit flex justify-center items-center">
        <button
          className="font-semibold"
          onClick={refreshLocation}
          title="Refresh"
        >
          <RefreshSVG />
        </button>
        <InformationButton />
      </div>
    </div>
  );
};

export const NComponent: React.FC = () => (
  <div className="flex items-center justify-center w-8 h-8 bg-[#fbcc0a] transition-all rounded-full">
    <div className="text-black text-2xl">N</div>
  </div>
);

export const QComponent: React.FC = () => (
  <div className="flex items-center justify-center w-8 h-8 bg-[#fbcc0a] transition-all rounded-full">
    <div className="text-black text-2xl">Q</div>
  </div>
);

export const RComponent: React.FC = () => (
  <div className="flex items-center justify-center w-8 h-8 bg-[#fbcc0a] transition-all rounded-full">
    <div className="text-black text-2xl">R</div>
  </div>
);

export const WComponent: React.FC = () => (
  <div className="flex items-center justify-center w-8 h-8 bg-[#fbcc0a] transition-all rounded-full">
    <div className="text-black text-2xl">W</div>
  </div>
);

export const BComponent: React.FC = () => (
  <div className="flex items-center justify-center  w-8 h-8 bg-[#ff6318]  transition-all rounded-full">
    <div className="text-white text-2xl">B</div>
  </div>
);

export const DComponent: React.FC = () => (
  <div className="flex items-center justify-center w-8 h-8 bg-[#ff6318]  transition-all rounded-full">
    <div className="text-white text-2xl">D</div>
  </div>
);

export const FComponent: React.FC = () => (
  <div className="flex items-center justify-center w-8 h-8 bg-[#ff6318]  transition-all rounded-full">
    <div className="text-white text-2xl">F</div>
  </div>
);

export const MComponent: React.FC = () => (
  <div className="flex items-center justify-center w-8 h-8 bg-[#ff6318]  transition-all rounded-full">
    <div className="text-white text-2xl">M</div>
  </div>
);

export const OneComponent: React.FC = () => (
  <div className="flex items-center justify-center w-8 h-8 bg-[#ee352e]  transition-all rounded-full">
    <div className="text-white text-2xl">1</div>
  </div>
);

export const TwoComponent: React.FC = () => (
  <div className="flex items-center justify-center w-8 h-8 bg-[#ee352e]  transition-all rounded-full">
    <div className="text-white text-2xl">2</div>
  </div>
);

export const ThreeComponent: React.FC = () => (
  <div className="flex items-center justify-center w-8 h-8 bg-[#ee352e]  transition-all rounded-full">
    <div className="text-white text-2xl">3</div>
  </div>
);

export const FourComponent: React.FC = () => (
  <div className="flex items-center justify-center w-8 h-8 bg-[#00933c]  transition-all rounded-full">
    <div className="text-white text-2xl">4</div>
  </div>
);

export const FiveComponent: React.FC = () => (
  <div className="flex items-center justify-center w-8 h-8 bg-[#00933c]  transition-all rounded-full">
    <div className="text-white text-2xl">5</div>
  </div>
);

export const SixComponent: React.FC = () => (
  <div className="flex items-center justify-center w-8 h-8 bg-[#00933c]  transition-all rounded-full">
    <div className="text-white text-2xl">6</div>
  </div>
);

export const AComponent: React.FC = () => (
  <div className="flex items-center justify-center w-8 h-8 bg-[#0139a6]  transition-all rounded-full">
    <div className="text-white text-2xl">A</div>
  </div>
);

export const CComponent: React.FC = () => (
  <div className="flex items-center justify-center w-8 h-8 bg-[#0139a6]  transition-all rounded-full">
    <div className="text-white text-2xl">C</div>
  </div>
);

export const EComponent: React.FC = () => (
  <div className="flex items-center justify-center w-8 h-8 bg-[#0139a6]  transition-all rounded-full">
    <div className="text-white text-2xl">E</div>
  </div>
);

export const JComponent: React.FC = () => (
  <div className="flex items-center justify-center w-8 h-8 bg-[#996633]  transition-all rounded-full">
    <div className="text-white text-2xl">J</div>
  </div>
);

export const ZComponent: React.FC = () => (
  <div className="flex items-center justify-center w-8 h-8 bg-[#996633]  transition-all rounded-full">
    <div className="text-white text-2xl">Z</div>
  </div>
);

export const LComponent: React.FC = () => (
  <div className="flex items-center justify-center w-8 h-8 bg-[#a6a9ac]  transition-all rounded-full">
    <div className="text-white text-2xl">L</div>
  </div>
);

export const SComponent: React.FC = () => (
  <div className="flex items-center justify-center w-8 h-8 bg-[#a6a9ac]  transition-all rounded-full">
    <div className="text-white text-2xl">S</div>
  </div>
);

export const SevenComponent: React.FC = () => (
  <div className="flex items-center justify-center w-8 h-8 bg-[#ba33ad]  transition-all rounded-full">
    <div className="text-white text-2xl">7</div>
  </div>
);

export const GComponent: React.FC = () => (
  <div className="flex items-center justify-center w-8 h-8 bg-[#6cbe44]  transition-all rounded-full">
    <div className="text-white text-2xl">G</div>
  </div>
);

export const UnknownTrainComponent: React.FC<{ routeId: string }> = ({
  routeId,
}) => (
  <div className="bg-slate-400 w-8 h-8 text-white rounded-full shadow-2xl flex justify-center items-center font-semibold">
    {routeId}
  </div>
);

// map of train symbols to components
export const trainSymbolMap: { [key: string]: React.FC } = {
  N: NComponent,
  Q: QComponent,
  R: RComponent,
  W: WComponent,
  B: BComponent,
  D: DComponent,
  F: FComponent,
  M: MComponent,
  '1': OneComponent,
  '2': TwoComponent,
  '3': ThreeComponent,
  '4': FourComponent,
  '5': FiveComponent,
  '6': SixComponent,
  A: AComponent,
  C: CComponent,
  E: EComponent,
  J: JComponent,
  Z: ZComponent,
  L: LComponent,
  S: SComponent,
  '7': SevenComponent,
  G: GComponent,
};

export const TrainSymbolsDisplay = ({
  side,
}: {
  side?: string | undefined;
}) => {
  const keys = Object.keys(trainSymbolMap);
  const middleIndex = Math.ceil(keys.length / 2);

  const LeftLogos = keys.slice(0, middleIndex).map((key) => {
    const TrainLogo = trainSymbolMap[key];
    return <TrainLogo key={key} />;
  });

  const RightLogos = keys.slice(middleIndex).map((key) => {
    const TrainLogo = trainSymbolMap[key];
    return <TrainLogo key={key} />;
  });

  if (side === 'left') {
    return <div className="flex items-center">{LeftLogos}</div>;
  } else if (side === 'right') {
    return <div className="flex items-center">{RightLogos}</div>;
  } else {
    return (
      <div className="flex space-x-1">
        <div className="flex items-center space-x-1">{LeftLogos}</div>
        <div className="flex items-center space-x-1">{RightLogos}</div>
      </div>
    );
  }
};

export const TrainCarousel: React.FC = () => {
  const carouselRef = useRef<HTMLDivElement>(null);

  // Load and set the scroll position from localStorage
  useEffect(() => {
    const savedPosition = localStorage.getItem('carouselScrollPosition');

    if (carouselRef.current && savedPosition) {
      const position = parseFloat(savedPosition);
      carouselRef.current.style.transform = `translateX(${position}px)`;
    }

    const saveCarouselState = () => {
      if (carouselRef.current) {
        const transformMatrix = window.getComputedStyle(
          carouselRef.current,
        ).transform;
        const matrixValues = transformMatrix.match(/matrix.*\((.+)\)/);
        const xPosition = matrixValues
          ? parseFloat(matrixValues[1].split(', ')[4])
          : 0;
        localStorage.setItem('carouselScrollPosition', xPosition.toString());
      }
    };

    window.addEventListener('beforeunload', saveCarouselState);
    return () => {
      window.removeEventListener('beforeunload', saveCarouselState);
    };
  }, []);

  const TrainComponents = [
    NComponent,
    QComponent,
    RComponent,
    WComponent,
    BComponent,
    DComponent,
    FComponent,
    MComponent,
    OneComponent,
    TwoComponent,
    ThreeComponent,
    FourComponent,
    FiveComponent,
    SixComponent,
    AComponent,
    CComponent,
    EComponent,
    JComponent,
    ZComponent,
    LComponent,
    SComponent,
    SevenComponent,
  ];

  return (
    <>
      <style>
        {`
          @keyframes scroll {
            from { transform: translateX(80%); }
            to { transform: translateX(-80%); }
          }
        `}
      </style>
      <div className="overflow-hidden pt-1">
        <div
          ref={carouselRef}
          className="flex space-x-4 whitespace-nowrap right-0"
          style={{ animation: 'scroll 30s linear infinite' }}
        >
          {TrainComponents.map((Component, index) => (
            <Component key={index} />
          ))}
        </div>
      </div>
    </>
  );
};

export const InformationButton: React.FC = () => {
  return (
    <Link
      href="/about"
      className="bg-black text-white font-bold rounded-md h-[40px] w-[40px] flex items-center justify-center ml-2"
    >
      <svg
        data-slot="icon"
        fill="none"
        strokeWidth="1.5"
        stroke="white"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
        aria-hidden="true"
        width="28"
        height="28"
      >
        <path
          strokeLinecap="round"
          strokeLinejoin="round"
          d="m11.25 11.25.041-.02a.75.75 0 0 1 1.063.852l-.708 2.836a.75.75 0 0 0 1.063.853l.041-.021M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Zm-9-3.75h.008v.008H12V8.25Z"
        ></path>
      </svg>
    </Link>
  );
};

const trainFamilyComponents: Record<string, React.FC[]> = {
  '7 Avenue': [OneComponent, TwoComponent, ThreeComponent],
  'Lexington Avenue': [FourComponent, FiveComponent, SixComponent],
  '8 Avenue': [AComponent, CComponent, EComponent],
  '6 Avenue': [BComponent, DComponent, FComponent, MComponent],
  Broadway: [NComponent, QComponent, RComponent, WComponent],
  Shuttle: [SComponent],
  '14 Street': [LComponent],
  'Nassau Street': [JComponent, ZComponent],
  Crosstown: [GComponent],
  Flushing: [SevenComponent],
};

const FilterSVG = () => {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 24 24"
      strokeWidth="1.5"
      stroke="white"
      width="28"
      height="28"
    >
      <path
        strokeLinecap="round"
        strokeLinejoin="round"
        d="M10.5 6h9.75M10.5 6a1.5 1.5 0 1 1-3 0m3 0a1.5 1.5 0 1 0-3 0M3.75 6H7.5m3 12h9.75m-9.75 0a1.5 1.5 0 0 1-3 0m3 0a1.5 1.5 0 0 0-3 0m-3.75 0H7.5m9-6h3.75m-3.75 0a1.5 1.5 0 0 1-3 0m3 0a1.5 1.5 0 0 0-3 0m-9.75 0h9.75"
      />
    </svg>
  );
};

type FilterButtonProps = {
  onSelectFamily: (family: string) => void;
};

export const FilterButton: React.FC<FilterButtonProps> = ({
  onSelectFamily,
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const [selectedFamily, setSelectedFamily] = useState<string>('');

  const handleSelectFamily = (family: string) => {
    if (family === selectedFamily) {
      setSelectedFamily('');
      onSelectFamily('');
    } else {
      onSelectFamily(family);
      setSelectedFamily(family);
    }
    setIsOpen(false);
  };

  return (
    <div className="relative">
      <button
        title="Filter"
        className="bg-black text-white font-bold rounded-md h-[40px] w-[40px] flex items-center justify-center ml-2"
        onClick={() => setIsOpen(!isOpen)}
      >
        <FilterSVG />
      </button>
      {isOpen && (
        <div className="absolute left-1/2 transform -translate-x-1/2 bottom-full mb-2 bg-white shadow-lg rounded-lg w-48 z-10 border-4 border-black backdrop-blur-sm">
          {Object.keys(trainFamilyComponents).map((family, index, array) => (
            <div
              key={family}
              className={`flex flex-wrap justify-center items-center p-2 cursor-pointer ${index < array.length - 1 ? 'border-b border-gray-300' : ''} ${family === selectedFamily ? 'bg-gray-300' : ''}`}
              onClick={() => handleSelectFamily(family)}
            >
              {trainFamilyComponents[family].map((Component, idx) => (
                <Component key={idx} />
              ))}
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export const RefreshSVG = () => {
  return (
    <div className="h-[40px] w-[40px] bg-black text-white flex items-center justify-center rounded-md">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 24 24"
        strokeWidth="1.5"
        stroke="currentColor"
        width="28"
        height="28"
      >
        <path
          strokeLinecap="round"
          strokeLinejoin="round"
          d="M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0 3.181 3.183a8.25 8.25 0 0 0 13.803-3.7M4.031 9.865a8.25 8.25 0 0 1 13.803-3.7l3.181 3.182m0-4.991v4.99"
        />
      </svg>
    </div>
  );
};

export const AddToHomeScreen = () => {
  const [showInstallMessage, setShowInstallMessage] = useState(false);

  useEffect(() => {
    const isIos = () => {
      const userAgent = window.navigator.userAgent.toLowerCase();
      return /iphone|ipad|ipod/.test(userAgent);
    };

    const isInStandaloneMode = () =>
      'standalone' in window.navigator && window.navigator.standalone;

    const shouldShowMessage = () => {
      let visits = Number(localStorage.getItem('visits') || 0);
      return visits < 10;
    };

    const incrementVisits = () => {
      let visits: number = Number(localStorage.getItem('visits') || 0);
      localStorage.setItem('visits', String(visits + 1));
    };

    if (isIos() && !isInStandaloneMode() && shouldShowMessage()) {
      setShowInstallMessage(true);
      incrementVisits();
    }
  }, []);

  const handleClose = () => {
    setShowInstallMessage(false);
  };

  return (
    <>
      {showInstallMessage && (
        <div className="fixed bottom-0 inset-x-0 bg-transparent">
          <div className="relative bg-gray-300 px-3 py-2.5 flex items-center justify-center text-center text-sm font-sans">
            <button
              onClick={handleClose}
              className="absolute top-0 right-0 p-1"
              aria-label="Close"
            >
              ×
            </button>
            <span>
              Install this webapp on your iPhone: tap <ShareIcon /> and then Add
              to Home Screen.
            </span>
          </div>
        </div>
      )}
    </>
  );
};

const ShareIcon = () => {
  return (
    <svg
      fill="#007AFF"
      width="30"
      height="30"
      viewBox="0 0 50 50"
      xmlns="http://www.w3.org/2000/svg"
      stroke="#007AFF"
      strokeWidth=".1"
      style={{ verticalAlign: 'middle', display: 'inline-block' }}
    >
      <g id="SVGRepo_bgCarrier" strokeWidth="0"></g>
      <g
        id="SVGRepo_tracerCarrier"
        strokeLinecap="round"
        strokeLinejoin="round"
      ></g>
      <g id="SVGRepo_iconCarrier">
        <path d="M30.3 13.7L25 8.4l-5.3 5.3-1.4-1.4L25 5.6l6.7 6.7z"></path>
        <path d="M24 7h2v21h-2z"></path>
        <path d="M35 40H15c-1.7 0-3-1.3-3-3V19c0-1.7 1.3-3 3-3h7v2h-7c-.6 0-1 .4-1 1v18c0 .6.4 1 1 1h20c.6 0 1-.4 1-1V19c0-.6-.4-1-1-1h-7v-2h7c1.7 0 3 1.3 3 3v18c0 1.7-1.3 3-3 3z"></path>
      </g>
    </svg>
  );
};

// File: trainHelpers/TrainContainer.tsx
// components/LocationPrompt.tsx
'use client';

import React, { useState, useEffect } from 'react';
import {
  TrainMenuBarDesktop,
  Location,
  TrainSymbolsDisplay,
  TrainCarousel,
  AsyncStationComponent,
  InformationButton,
  AddToHomeScreen,
} from './TrainComponents';
import {
  useContinuousCountdown,
  useGeolocationWithCache,
  useNearestStations,
} from './TrainHooks';
import { filterStops } from './trainHelper';
import { TrainMenuBarMobile } from './ClientComponents';

const TrainsContainer: React.FC = () => {
  const [searchRadius, setSearchRadius] = useState<string | number>(0.5);
  const [selectedFamily, setSelectedFamily] = useState<string>('');

  const handleSelectedFamily = (family: string) => {
    setSelectedFamily(family);
  };

  // hooks
  const { timer, refreshCounter } = useContinuousCountdown();
  const { location, locationStatus, refreshLocation } =
    useGeolocationWithCache(setSearchRadius);
  const { nearestStations } = useNearestStations(
    location,
    searchRadius,
    selectedFamily,
  );

  console.log('nearestStations', nearestStations);

  return (
    <div className="flex justify-center items-start md:py-4 md:px-4">
      <div className="min-h-[100vh] md:min-h-[90vh] bg-white shadow-xl md:rounded-3xl overflow-hidden w-full max-w-4xl">
        <div className="relative flex flex-col justify-center items-center w-full min-h-20 h-fit bg-black text-center font-semibold text-white py-2 mb-2 font-sans">
          <div className="min-h-[2px] w-[90%] md:w-[80%] bg-white"></div>
          <div className="flex">
            <div className="text-4xl px-4">Subway</div>
          </div>
          <div className="block md:hidden">
            <TrainCarousel />
          </div>
          <div className="hidden md:block">
            <TrainSymbolsDisplay />
          </div>
        </div>
        <TrainMenuBarDesktop
          refreshLocation={refreshLocation}
          setSelectedFamily={handleSelectedFamily}
        />
        <div className="w-full p-4 py-0">
          {searchRadius === 'Demo' && (
            <div className="text-center text-gray-500 pb-4">
              Using demo location, Grand Central Terminal with a 0.25 mile
              radius.
            </div>
          )}
          {locationStatus === 'ACQUIRING' && (
            <div className="text-center text-gray-500">
              Acquiring location, please hold on...
            </div>
          )}
          {locationStatus === 'NOT_FOUND' && searchRadius !== 'Demo' && (
            <div className="flex flex-col items-center justify-center">
              <div className="text-center text-gray-500">
                Location not found. Please enable location services.
              </div>
              <button
                type="button"
                title="Try Demo Location"
                onClick={() => setSearchRadius('Demo')}
                className="p-2 m-4 bg-black text-white rounded-md my-2 w-fit"
              >
                Try Demo Location
              </button>
            </div>
          )}
          {(locationStatus === 'FOUND' || searchRadius === 'Demo') &&
            nearestStations.length > 0 && (
              <>
                {nearestStations.map((station, index) => (
                  <AsyncStationComponent
                    key={index}
                    stationIn={station}
                    refreshCounter={refreshCounter}
                    selectedFamily={selectedFamily}
                  />
                ))}
                <div className="flex flex items-center justify-center">
                  <button
                    type="button"
                    title="Search within 1 mile radius"
                    onClick={() => setSearchRadius(1)}
                    className="p-2 bg-black text-white rounded-md my-2 w-fit"
                    style={{
                      visibility: searchRadius === 0.5 ? 'visible' : 'hidden',
                    }}
                  >
                    Expand Search Radius to 1 Mile
                  </button>
                </div>
              </>
            )}
          {locationStatus === 'FOUND' &&
            nearestStations.length === 0 &&
            searchRadius !== 1 && (
              <div className="flex flex-col items-center justify-center">
                <div className="text-center text-gray-500">
                  No nearby stations found.
                </div>
                <button
                  type="button"
                  title="Search within 1 mile radius"
                  onClick={() => setSearchRadius(1)}
                  className="p-2 bg-black text-white rounded-md my-2 w-fit"
                  style={{
                    visibility: searchRadius === 0.5 ? 'visible' : 'hidden',
                  }}
                >
                  Expand Search Radius to 1 Mile
                </button>
              </div>
            )}
          {locationStatus === 'FOUND' &&
            nearestStations.length === 0 &&
            searchRadius === 1 && (
              <div className="flex flex-col items-center justify-center">
                <div className="text-center text-gray-500">
                  No nearby stations found.
                </div>
                <button
                  type="button"
                  title="Try Demo Location"
                  onClick={() => setSearchRadius('Demo')}
                  className="p-2 m-4 bg-black text-white rounded-md my-2 w-fit"
                >
                  Try Demo Location
                </button>
              </div>
            )}
        </div>
        <TrainMenuBarMobile
          refreshLocation={refreshLocation}
          setSelectedFamily={handleSelectedFamily}
        />
        <AddToHomeScreen />
      </div>
    </div>
  );
};

export default TrainsContainer;

// File: trainHelpers/TrainHooks.ts
import { useState, useEffect, useCallback } from 'react';

import { Location, Station } from './TrainComponents';
import {
  filterStops,
  findClosestStations,
  fixArrivalTime,
  sortSubwayStops,
} from './trainHelper';

export interface Stop {
  stopId: string;
  stopName: string;
  distance: number;
  n_headsign: string;
  s_headsign: string;
}

const LOCATION_EXPIRY_TIME = 0.25 * 60 * 1000; // 15 seconds
export const GRAND_CENTRAL = { lat: 40.7527, lng: -73.9772 };

function getSavedLocation() {
  const saved = localStorage.getItem('userLocation');
  if (saved) {
    const parsed = JSON.parse(saved);
    const currentTime = new Date().getTime();
    const isRecent = currentTime - parsed.timestamp < LOCATION_EXPIRY_TIME;
    if (isRecent) {
      return parsed.location; // Ensure you are returning the location part correctly
    }
  }
  return null;
}

function saveLocation(location: any) {
  const data = {
    location,
    timestamp: new Date().getTime(),
  };
  localStorage.setItem('userLocation', JSON.stringify(data));
}

export const useGeolocationWithCache = (
  setSearchRadius: React.Dispatch<React.SetStateAction<number | string>>,
) => {
  const [location, setLocation] = useState<Location | null>(null);
  const [status, setStatus] = useState('ACQUIRING');

  const getLocation = useCallback((bypassCache = false) => {
    if (!bypassCache) {
      const cachedLocation = getSavedLocation();
      if (cachedLocation) {
        setLocation(cachedLocation);
        setStatus('FOUND');
        return;
      }
    }

    setLocation(null);
    setSearchRadius(0.5);
    if ('geolocation' in navigator) {
      setStatus('ACQUIRING');
      navigator.geolocation.getCurrentPosition(
        (position) => {
          const newLocation = {
            lat: position.coords.latitude,
            lng: position.coords.longitude,
          };
          saveLocation(newLocation);
          setLocation(newLocation);
          setStatus('FOUND');
        },
        (error) => {
          console.error('Geolocation error:', error);
          setStatus('NOT_FOUND');
        },
      );
    } else {
      console.error('Geolocation is not available.');
      setStatus('NOT_FOUND');
    }
  }, []);

  useEffect(() => {
    getLocation();
  }, [getLocation]);

  return {
    location,
    locationStatus: status,
    refreshLocation: () => getLocation(true),
  };
};

export const useNearestStations = (
  location: Location | null,
  searchRadius: string | number,
  selectedFamily: string,
) => {
  const [nearestStations, setNearestStations] = useState<Station[]>([]);

  if (searchRadius === 'Demo') {
    location = GRAND_CENTRAL;
    searchRadius = 0.25;
  }

  useEffect(() => {
    const findNearestStations = async () => {
      if (!location || !searchRadius) return;
      try {
        const closestStations = findClosestStations(
          location.lat,
          location.lng,
          searchRadius as number,
        );
        const sortedStations = sortSubwayStops(closestStations);

        setNearestStations(sortedStations);
      } catch (error) {
        console.error('Error finding nearest stations: ', error);
      }
    };

    findNearestStations();
  }, [location, searchRadius]);

  return { nearestStations };
};

export const useStation = (station: Station, refreshCounter: number) => {
  const [stop, setStop] = useState<Station>();

  useEffect(() => {
    const fetchStop = async () => {
      if (!station || station === undefined) return;
      try {
        const response = await fetch(`https://www.traintimes.nyc/api`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ stops: [station] }),
          next: {
            revalidate: 15,
          },
        });
        if (!response.ok) throw new Error('Network response was not ok');
        const data = await response.json();
        fixArrivalTime(data);
        setStop(data);
      } catch (error) {
        console.error('Failed to fetch stop:', error);
        setStop(station);
      }
    };

    fetchStop();
  }, [station.stopName, refreshCounter]);

  return stop;
};

export const useContinuousCountdown = () => {
  const duration = 15;
  const [timer, setTimer] = useState(duration);
  const [refreshCounter, setRefreshCounter] = useState(0);

  useEffect(() => {
    const intervalId = setInterval(() => {
      setTimer((prevTimer) => {
        if (prevTimer === 0) {
          setRefreshCounter((prevCounter) => prevCounter + 1);
          return duration;
        } else {
          return prevTimer - 1;
        }
      });
    }, 1000);

    return () => {
      clearInterval(intervalId);
    };
  }, []);

  return { timer, refreshCounter };
};

// File: trainHelpers/trainHelper.ts
import { Station, Train } from './TrainComponents';
import { parseISO, differenceInSeconds } from 'date-fns';
import stations from './stations.json';

function processTrains(trains: Train[] | null) {
  if (!trains) return [];
  const currentZonedTime = new Date();

  return trains
    .map((train) => {
      const arrivalTimeZoned = parseISO(train.arrival_time); // Already in Eastern Time
      const timeDiffInSeconds = differenceInSeconds(
        arrivalTimeZoned,
        currentZonedTime,
      );
      return {
        ...train,
        timeDiffInSeconds,
      };
    })
    .filter((train) => train.timeDiffInSeconds >= -30)
    .sort((a, b) => a.timeDiffInSeconds - b.timeDiffInSeconds) // Sort based on timeDiffInSeconds
    .map((train) => {
      const minutes = Math.floor(train.timeDiffInSeconds / 60);
      if (minutes <= 0) {
        train.arrival_time = 'arriving';
      } else {
        train.arrival_time = `${minutes} ${minutes === 1 ? 'minute' : 'minutes'}`;
      }
      return train;
    });
}

export const fixArrivalTime = (station: Station) => {
  station.n_trains = processTrains(station.n_trains);
  station.s_trains = processTrains(station.s_trains);
};

function getDirection(tripId: string): string {
  const tripPath = tripId.split('_')[1];
  const split = tripPath.split('..');
  let direction;
  if (split.length === 1) {
    direction = tripPath.split('.')[1][0];
  } else {
    direction = split[1][0];
  }

  if (direction != 'N' && direction != 'S') return '';
  return direction;
}

export function buildTrainData(trains: Train[], stations: Station[]) {
  const newTrainData = stations?.map((station) => {
    let northStationTrains = trains?.filter(
      (train) =>
        train.stop_id === station.stopId && getDirection(train.trip_id) === 'N',
    );

    let southStationTrains = trains?.filter(
      (train) =>
        train.stop_id === station.stopId && getDirection(train.trip_id) === 'S',
    );

    if (station.n_headsign === '') northStationTrains = [];
    if (station.s_headsign === '') southStationTrains = [];

    return {
      ...station,
      n_trains: northStationTrains,
      s_trains: southStationTrains,
    };
  });

  return newTrainData;
}

export const findClosestStations = (
  lat: number,
  lng: number,
  maxDistance: number = 0.5, // Default max distance in miles
): Station[] => {
  const filteredStops = stations
    .map((station: any) => {
      const distance = haversineDistance(
        lat,
        lng,
        parseFloat(station.stop_lat),
        parseFloat(station.stop_lon),
      );
      return { ...station, distance };
    })
    .filter((station: any) => station.distance <= maxDistance)
    .sort((a: any, b: any) => a.distance - b.distance);

  return filteredStops.map((station: any) => ({
    stopId: station.stop_id,
    stopName: station.stop_name,
    distance: station.distance,
    n_headsign: station.n_headsign,
    s_headsign: station.s_headsign,
    n_trains: null,
    s_trains: null,
    coordinates: {
      lat: station.stop_lat,
      lng: station.stop_lon,
    },
  }));
};

const haversineDistance = (
  lat1: number,
  lon1: number,
  lat2: number,
  lon2: number,
): number => {
  const toRadians = (degrees: number): number => degrees * (Math.PI / 180);
  const R = 3959; // Radius of the Earth in miles
  const dLat = toRadians(lat2 - lat1);
  const dLon = toRadians(lon2 - lon1);
  const a =
    Math.sin(dLat / 2) * Math.sin(dLat / 2) +
    Math.cos(toRadians(lat1)) *
      Math.cos(toRadians(lat2)) *
      Math.sin(dLon / 2) *
      Math.sin(dLon / 2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  return R * c; // Distance in miles
};

const lineFamilies: Record<string, string> = {
  '1': '7 Avenue',
  '2': '7 Avenue',
  '3': '7 Avenue',
  '4': 'Lexington Avenue',
  '5': 'Lexington Avenue',
  '6': 'Lexington Avenue',
  '7': 'Flushing',
  '9': 'Shuttle',
  A: '8 Avenue',
  C: '8 Avenue',
  E: '8 Avenue',
  B: '6 Avenue',
  D: '6 Avenue',
  F: '6 Avenue',
  M: '6 Avenue',
  N: 'Broadway',
  Q: 'Broadway',
  R: 'Broadway',
  W: 'Broadway',
  L: '14 Street',
  J: 'Nassau Street',
  Z: 'Nassau Street',
  G: 'Crosstown',
};

export function getLineFamily(stopId: string): string {
  const lineLetter = stopId[0];
  return lineFamilies[lineLetter] || 'Unknown';
}

function adjustDistances(stops: Station[]): void {
  const groupMinDistances: Record<string, number> = {};

  stops.forEach((stop) => {
    const key = `${stop.stopName}-${getLineFamily(stop.stopId)}`;
    if (key in groupMinDistances) {
      groupMinDistances[key] = Math.min(groupMinDistances[key], stop.distance);
    } else {
      groupMinDistances[key] = stop.distance;
    }
  });

  stops.forEach((stop) => {
    const key = `${stop.stopName}-${getLineFamily(stop.stopId)}`;
    stop.distance = groupMinDistances[key];
  });
}

export function sortSubwayStops(stops: Station[]): Station[] {
  adjustDistances(stops);
  return stops.sort((a, b) => a.distance - b.distance);
}

export function filterStops(
  stops: Station[],
  selectedFamily: string,
): Station[] {
  if (selectedFamily === '') return stops;
  return stops.filter((stop) => getLineFamily(stop.stopId) === selectedFamily);
}

